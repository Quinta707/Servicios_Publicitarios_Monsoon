// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ServiciosPublicitarios.Entities.Entities;

#nullable disable

namespace ServiciosPublicitarios.DataAccess.Context
{
    public partial class ServiciospublicitariosContext : DbContext
    {
        public ServiciospublicitariosContext()
        {
        }

        public ServiciospublicitariosContext(DbContextOptions<ServiciospublicitariosContext> options)
            : base(options)
        {
        }

        public virtual DbSet<VW_tbCargos> VW_tbCargos { get; set; }
        public virtual DbSet<VW_tbCategorias> VW_tbCategorias { get; set; }
        public virtual DbSet<VW_tbClientes> VW_tbClientes { get; set; }
        public virtual DbSet<VW_tbDepartamentos> VW_tbDepartamentos { get; set; }
        public virtual DbSet<VW_tbEmpleados> VW_tbEmpleados { get; set; }
        public virtual DbSet<VW_tbEstadosCiviles> VW_tbEstadosCiviles { get; set; }
        public virtual DbSet<VW_tbFacturaDetalle> VW_tbFacturaDetalle { get; set; }
        public virtual DbSet<VW_tbFacturas> VW_tbFacturas { get; set; }
        public virtual DbSet<VW_tbInsumos> VW_tbInsumos { get; set; }
        public virtual DbSet<VW_tbInsumosPorServicio> VW_tbInsumosPorServicio { get; set; }
        public virtual DbSet<VW_tbMetodosdePago> VW_tbMetodosdePago { get; set; }
        public virtual DbSet<VW_tbMunicipios> VW_tbMunicipios { get; set; }
        public virtual DbSet<VW_tbPantallas> VW_tbPantallas { get; set; }
        public virtual DbSet<VW_tbPantallasPorRoles> VW_tbPantallasPorRoles { get; set; }
        public virtual DbSet<VW_tbProveedores> VW_tbProveedores { get; set; }
        public virtual DbSet<VW_tbRoles> VW_tbRoles { get; set; }
        public virtual DbSet<VW_tbSucursales> VW_tbSucursales { get; set; }
        public virtual DbSet<VW_tbUsuarios> VW_tbUsuarios { get; set; }
        public virtual DbSet<VW_tbservicios> VW_tbservicios { get; set; }
        public virtual DbSet<tbCargos> tbCargos { get; set; }
        public virtual DbSet<tbCategorias> tbCategorias { get; set; }
        public virtual DbSet<tbClientes> tbClientes { get; set; }
        public virtual DbSet<tbDepartamentos> tbDepartamentos { get; set; }
        public virtual DbSet<tbEmpleados> tbEmpleados { get; set; }
        public virtual DbSet<tbEstadosCiviles> tbEstadosCiviles { get; set; }
        public virtual DbSet<tbFacturaDetalle> tbFacturaDetalle { get; set; }
        public virtual DbSet<tbFacturas> tbFacturas { get; set; }
        public virtual DbSet<tbInsumos> tbInsumos { get; set; }
        public virtual DbSet<tbInsumosPorServicios> tbInsumosPorServicios { get; set; }
        public virtual DbSet<tbMetodosdePago> tbMetodosdePago { get; set; }
        public virtual DbSet<tbMunicipios> tbMunicipios { get; set; }
        public virtual DbSet<tbPantallas> tbPantallas { get; set; }
        public virtual DbSet<tbPantallasPorRoles> tbPantallasPorRoles { get; set; }
        public virtual DbSet<tbProveedores> tbProveedores { get; set; }
        public virtual DbSet<tbRoles> tbRoles { get; set; }
        public virtual DbSet<tbServicios> tbServicios { get; set; }
        public virtual DbSet<tbSucursales> tbSucursales { get; set; }
        public virtual DbSet<tbUsuarios> tbUsuarios { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AI");

            modelBuilder.Entity<VW_tbCargos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbCargos", "gral");

                entity.Property(e => e.carg_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.carg_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.carg_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_Creacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Modificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbCategorias>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbCategorias", "gral");

                entity.Property(e => e.cate_Descripcion).HasMaxLength(100);

                entity.Property(e => e.cate_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.cate_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_Creacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Modificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbClientes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbClientes", "pbli");

                entity.Property(e => e.clie_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.clie_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.clie_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.clie_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.clie_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.clie_Identidad)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.clie_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.clie_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.clie_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.depa_Codigo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.eciv_Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.muni_Codigo)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.user_Creacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Modificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbDepartamentos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbDepartamentos", "gral");

                entity.Property(e => e.depa_Codigo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.depa_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Creacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Modificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbEmpleados>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbEmpleados", "pbli");

                entity.Property(e => e.carg_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.depa_Codigo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.eciv_Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.empe_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.empe_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.empe_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empe_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.empe_Identidad)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.empe_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.empe_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empe_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.muni_Codigo)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.sucu_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.user_Creacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Modificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbEstadosCiviles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbEstadosCiviles", "gral");

                entity.Property(e => e.eciv_Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.eciv_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.eciv_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_Creacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Modificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbFacturaDetalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbFacturaDetalle", "pbli");

                entity.Property(e => e.fdet_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.fdet_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.serv_Nombre).HasMaxLength(150);

                entity.Property(e => e.serv_Precio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.user_Creacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Modificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbFacturas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbFacturas", "pbli");

                entity.Property(e => e.clie_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.empe_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.fact_FechaCompra).HasColumnType("datetime");

                entity.Property(e => e.fact_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.fact_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.meto_Descripcion).HasMaxLength(100);

                entity.Property(e => e.sucu_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.user_Creacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Modificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbInsumos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbInsumos", "pbli");

                entity.Property(e => e.cate_Descripcion).HasMaxLength(100);

                entity.Property(e => e.insu_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.insu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.insu_Nombre).HasMaxLength(100);

                entity.Property(e => e.insu_Precio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.prov_Nombre).HasMaxLength(150);

                entity.Property(e => e.user_Creacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Modificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbInsumosPorServicio>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbInsumosPorServicio", "pbli");

                entity.Property(e => e.inse_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.inse_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.insu_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.insu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.insu_Nombre).HasMaxLength(100);

                entity.Property(e => e.insu_Precio).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VW_tbMetodosdePago>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbMetodosdePago", "gral");

                entity.Property(e => e.meto_Descripcion).HasMaxLength(100);

                entity.Property(e => e.meto_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.meto_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_Creacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Modificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbMunicipios>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbMunicipios", "gral");

                entity.Property(e => e.muni_Codigo)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.muni_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.muni_UsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Creacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Modificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbPantallas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbPantallas", "acce");

                entity.Property(e => e.pant_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.pant_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pant_Icono)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.pant_Id).ValueGeneratedOnAdd();

                entity.Property(e => e.pant_Menu)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.pant_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.pant_Url)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.pant_reactId)
                    .IsRequired()
                    .HasMaxLength(80);
            });

            modelBuilder.Entity<VW_tbPantallasPorRoles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbPantallasPorRoles", "acce");

                entity.Property(e => e.pant_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.prol_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.prol_FechaModificacion).HasColumnType("datetime");
            });

            modelBuilder.Entity<VW_tbProveedores>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbProveedores", "pbli");

                entity.Property(e => e.depa_Codigo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.muni_Codigo)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.prov_Correo).HasMaxLength(250);

                entity.Property(e => e.prov_Direccion).HasMaxLength(250);

                entity.Property(e => e.prov_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.prov_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.prov_Nombre).HasMaxLength(150);

                entity.Property(e => e.user_Creacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Modificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbRoles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbRoles", "acce");

                entity.Property(e => e.role_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.role_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.role_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Creacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Modificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbSucursales>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbSucursales", "pbli");

                entity.Property(e => e.depa_Codigo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.muni_Codigo)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.sucu_Direccion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.sucu_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.sucu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.sucu_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.user_Creacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Modificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbUsuarios>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbUsuarios", "acce");

                entity.Property(e => e.carg_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.empe_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.empe_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.role_Nombre).HasMaxLength(100);

                entity.Property(e => e.sucu_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.user_Contrasena).IsRequired();

                entity.Property(e => e.user_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.user_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbservicios>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbservicios", "pbli");

                entity.Property(e => e.serv_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.serv_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.serv_Nombre).HasMaxLength(150);

                entity.Property(e => e.serv_Precio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.user_Creacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Modificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<tbCargos>(entity =>
            {
                entity.HasKey(e => e.carg_Id)
                    .HasName("PK_gral_tbcargos_carg_Id");

                entity.ToTable("tbCargos", "gral");

                entity.Property(e => e.carg_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.carg_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.carg_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.carg_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.carg_UsuCreacionNavigation)
                    .WithMany(p => p.tbCargoscarg_UsuCreacionNavigation)
                    .HasForeignKey(d => d.carg_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PK_gral_tbCargos_acce_tbUsuarios_carg_UsuCreacion");

                entity.HasOne(d => d.carg_UsuModificacionNavigation)
                    .WithMany(p => p.tbCargoscarg_UsuModificacionNavigation)
                    .HasForeignKey(d => d.carg_UsuModificacion)
                    .HasConstraintName("PK_gral_tbCargos_acce_tbUsuarios_carg_UsuModificacion");
            });

            modelBuilder.Entity<tbCategorias>(entity =>
            {
                entity.HasKey(e => e.cate_Id)
                    .HasName("PK_gral_tbCategorias_cate_Id");

                entity.ToTable("tbCategorias", "gral");

                entity.Property(e => e.cate_Descripcion).HasMaxLength(100);

                entity.Property(e => e.cate_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.cate_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.cate_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.cate_UsuCreacionNavigation)
                    .WithMany(p => p.tbCategoriascate_UsuCreacionNavigation)
                    .HasForeignKey(d => d.cate_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PK_gral_tbCategorias_acce_tbUsuarios_cate_UsuCreacion");

                entity.HasOne(d => d.cate_UsuModificacionNavigation)
                    .WithMany(p => p.tbCategoriascate_UsuModificacionNavigation)
                    .HasForeignKey(d => d.cate_UsuModificacion)
                    .HasConstraintName("PK_gral_tbCategorias_acce_tbUsuarios_cate_UsuModificacion");
            });

            modelBuilder.Entity<tbClientes>(entity =>
            {
                entity.HasKey(e => e.clie_Id)
                    .HasName("PK_pbli_tbClientes_empe_Id");

                entity.ToTable("tbClientes", "pbli");

                entity.Property(e => e.clie_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.clie_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.clie_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.clie_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.clie_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.clie_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.clie_Identidad)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.clie_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.clie_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.clie_UsuCreacionNavigation)
                    .WithMany(p => p.tbClientesclie_UsuCreacionNavigation)
                    .HasForeignKey(d => d.clie_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbClientes_acce_tbUsuarios_UserCreate");

                entity.HasOne(d => d.clie_UsuModificacionNavigation)
                    .WithMany(p => p.tbClientesclie_UsuModificacionNavigation)
                    .HasForeignKey(d => d.clie_UsuModificacion)
                    .HasConstraintName("FK_pbli_tbClientes_acce_tbUsuarios_UserUpdate");

                entity.HasOne(d => d.eciv)
                    .WithMany(p => p.tbClientes)
                    .HasForeignKey(d => d.eciv_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbClientes_gral_tbEstadosCiviles_eciv_Id");

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbClientes)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbClientes_gral_tbMunicipios_muni_Id");
            });

            modelBuilder.Entity<tbDepartamentos>(entity =>
            {
                entity.HasKey(e => e.depa_Id)
                    .HasName("PK_gral_tbDepartamentos_depa_Id");

                entity.ToTable("tbDepartamentos", "gral");

                entity.Property(e => e.depa_Codigo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.depa_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.depa_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.depa_UsuCreacionNavigation)
                    .WithMany(p => p.tbDepartamentosdepa_UsuCreacionNavigation)
                    .HasForeignKey(d => d.depa_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbDepartamentos_acce_tbUsuarios_depa_UsuCreacion_user_Id");

                entity.HasOne(d => d.depa_UsuModificacionNavigation)
                    .WithMany(p => p.tbDepartamentosdepa_UsuModificacionNavigation)
                    .HasForeignKey(d => d.depa_UsuModificacion)
                    .HasConstraintName("FK_gral_tbDepartamentos_acce_tbUsuarios_depa_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbEmpleados>(entity =>
            {
                entity.HasKey(e => e.empe_Id)
                    .HasName("PK_pbli_tbEmpleados_empe_Id");

                entity.ToTable("tbEmpleados", "pbli");

                entity.Property(e => e.empe_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.empe_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.empe_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.empe_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empe_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.empe_Identidad)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.empe_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empe_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.carg)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.carg_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbEmpleados_gral_tbCargos_carg_Id");

                entity.HasOne(d => d.eciv)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.eciv_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbEmpleados_gral_tbEstadosCiviles_eciv_Id");

                entity.HasOne(d => d.empe_UsuCreacionNavigation)
                    .WithMany(p => p.tbEmpleadosempe_UsuCreacionNavigation)
                    .HasForeignKey(d => d.empe_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbEmpleados_acce_tbUsuarios_UserCreate");

                entity.HasOne(d => d.empe_UsuModificacionNavigation)
                    .WithMany(p => p.tbEmpleadosempe_UsuModificacionNavigation)
                    .HasForeignKey(d => d.empe_UsuModificacion)
                    .HasConstraintName("FK_pbli_tbEmpleados_acce_tbUsuarios_UserUpdate");

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbEmpleados_gral_tbMunicipios_muni_Id");

                entity.HasOne(d => d.sucu)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.sucu_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbEmpleados_pbli_tbSucursales_sucu_Id");
            });

            modelBuilder.Entity<tbEstadosCiviles>(entity =>
            {
                entity.HasKey(e => e.eciv_Id)
                    .HasName("PK_gral_tbEstadosCiviles_ectv_Id");

                entity.ToTable("tbEstadosCiviles", "gral");

                entity.Property(e => e.eciv_Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.eciv_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.eciv_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.eciv_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.eciv_UsuCreacionNavigation)
                    .WithMany(p => p.tbEstadosCivileseciv_UsuCreacionNavigation)
                    .HasForeignKey(d => d.eciv_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbEstadosCiviles_UsuCreacion_usua_Id");

                entity.HasOne(d => d.eciv_UsuModificacionNavigation)
                    .WithMany(p => p.tbEstadosCivileseciv_UsuModificacionNavigation)
                    .HasForeignKey(d => d.eciv_UsuModificacion)
                    .HasConstraintName("FK_gral_tbEstadosCiviles_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbFacturaDetalle>(entity =>
            {
                entity.HasKey(e => e.fdet_Id)
                    .HasName("PK_pbli_tbFacturaDetalle_fdet_Id");

                entity.ToTable("tbFacturaDetalle", "pbli");

                entity.Property(e => e.fdet_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.fdet_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.fdet_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.fact)
                    .WithMany(p => p.tbFacturaDetalle)
                    .HasForeignKey(d => d.fact_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbFacturaDetalle_fact_Id_pbli_tbFacturas_fact_Id");

                entity.HasOne(d => d.fdet_UsuCreacionNavigation)
                    .WithMany(p => p.tbFacturaDetallefdet_UsuCreacionNavigation)
                    .HasForeignKey(d => d.fdet_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbFacturaDetalle_fact_UsuCreacion_acce_tbUsuarios_inse_UsuCreacion");

                entity.HasOne(d => d.fdet_UsuModificacionNavigation)
                    .WithMany(p => p.tbFacturaDetallefdet_UsuModificacionNavigation)
                    .HasForeignKey(d => d.fdet_UsuModificacion)
                    .HasConstraintName("FK_pbli_tbFacturaDetalle_fact_UsuModificacion_acce_tbUsuarios_inse_UsuModificacion");

                entity.HasOne(d => d.serv)
                    .WithMany(p => p.tbFacturaDetalle)
                    .HasForeignKey(d => d.serv_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbFacturaDetalle_serv_Id_pbli_tbServicios_serv_Id");
            });

            modelBuilder.Entity<tbFacturas>(entity =>
            {
                entity.HasKey(e => e.fact_Id)
                    .HasName("PK_pbli_tbFacturas_fact_Id");

                entity.ToTable("tbFacturas", "pbli");

                entity.Property(e => e.fact_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.fact_FechaCompra).HasColumnType("datetime");

                entity.Property(e => e.fact_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.fact_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.clie_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbFacturas_clie_Id_pbli_tbClientes_clie_Id");

                entity.HasOne(d => d.empe)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.empe_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbFacturas_empe_Id_pbli_tbEmpleados_empe_Id");

                entity.HasOne(d => d.fact_UsuCreacionNavigation)
                    .WithMany(p => p.tbFacturasfact_UsuCreacionNavigation)
                    .HasForeignKey(d => d.fact_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbFacturas_fact_UsuCreacion_acce_tbUsuarios_inse_UsuCreacion");

                entity.HasOne(d => d.fact_UsuModificacionNavigation)
                    .WithMany(p => p.tbFacturasfact_UsuModificacionNavigation)
                    .HasForeignKey(d => d.fact_UsuModificacion)
                    .HasConstraintName("FK_pbli_tbFacturas_fact_UsuModificacion_acce_tbUsuarios_inse_UsuModificacion");

                entity.HasOne(d => d.meto)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.meto_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbFacturas_meto_Id_gral_tbMetodosdePago_meto_Id");
            });

            modelBuilder.Entity<tbInsumos>(entity =>
            {
                entity.HasKey(e => e.insu_Id)
                    .HasName("PK_pbli_tbInsumos_insu_Id");

                entity.ToTable("tbInsumos", "pbli");

                entity.Property(e => e.insu_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.insu_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.insu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.insu_Nombre).HasMaxLength(100);

                entity.Property(e => e.insu_Precio).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.cate)
                    .WithMany(p => p.tbInsumos)
                    .HasForeignKey(d => d.cate_Id)
                    .HasConstraintName("FK_pbli_tbInsumos_gral_tbCategorias_cate_Id");

                entity.HasOne(d => d.insu_UsuCreacionNavigation)
                    .WithMany(p => p.tbInsumosinsu_UsuCreacionNavigation)
                    .HasForeignKey(d => d.insu_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbInsumos_acce_tbUsuarios_insu_UsuCreacion");

                entity.HasOne(d => d.insu_UsuModificacionNavigation)
                    .WithMany(p => p.tbInsumosinsu_UsuModificacionNavigation)
                    .HasForeignKey(d => d.insu_UsuModificacion)
                    .HasConstraintName("FK_pbli_tbInsumos_acce_tbUsuarios_insu_UsuModificacion");

                entity.HasOne(d => d.prov)
                    .WithMany(p => p.tbInsumos)
                    .HasForeignKey(d => d.prov_Id)
                    .HasConstraintName("FK_pbli_tbInsumos_pbli_tbProveedores_prov_Id");
            });

            modelBuilder.Entity<tbInsumosPorServicios>(entity =>
            {
                entity.HasKey(e => e.inse_Id)
                    .HasName("PK_pbli_tbInsumosPorServicios_inse_Id");

                entity.ToTable("tbInsumosPorServicios", "pbli");

                entity.Property(e => e.inse_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.inse_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.inse_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.inse_UsuCreacionNavigation)
                    .WithMany(p => p.tbInsumosPorServiciosinse_UsuCreacionNavigation)
                    .HasForeignKey(d => d.inse_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbInsumosPorServicios_acce_tbUsuarios_inse_UsuCreacion");

                entity.HasOne(d => d.inse_UsuModificacionNavigation)
                    .WithMany(p => p.tbInsumosPorServiciosinse_UsuModificacionNavigation)
                    .HasForeignKey(d => d.inse_UsuModificacion)
                    .HasConstraintName("FK_pbli_tbInsumosPorServicios_acce_tbUsuarios_inse_UsuModificacion");

                entity.HasOne(d => d.insu)
                    .WithMany(p => p.tbInsumosPorServicios)
                    .HasForeignKey(d => d.insu_Id)
                    .HasConstraintName("FK_pbli_tbInsumosPorServicios_pbli_tbInsumos_insu_Id");

                entity.HasOne(d => d.serv)
                    .WithMany(p => p.tbInsumosPorServicios)
                    .HasForeignKey(d => d.serv_Id)
                    .HasConstraintName("FK_pbli_tbInsumosPorServicios_pbli_tbServicios_serv_Id");
            });

            modelBuilder.Entity<tbMetodosdePago>(entity =>
            {
                entity.HasKey(e => e.meto_Id)
                    .HasName("PK_gral_tbMetodosdePago_meto_Id");

                entity.ToTable("tbMetodosdePago", "gral");

                entity.Property(e => e.meto_Descripcion).HasMaxLength(100);

                entity.Property(e => e.meto_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.meto_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.meto_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.meto_UsuCreacionNavigation)
                    .WithMany(p => p.tbMetodosdePagometo_UsuCreacionNavigation)
                    .HasForeignKey(d => d.meto_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PK_gral_tbMetodosdePago_acce_tbUsuarios_meto_UsuCreacion");

                entity.HasOne(d => d.meto_UsuModificacionNavigation)
                    .WithMany(p => p.tbMetodosdePagometo_UsuModificacionNavigation)
                    .HasForeignKey(d => d.meto_UsuModificacion)
                    .HasConstraintName("PK_gral_tbMetodosdePago_acce_tbUsuarios_meto_UsuModificacion");
            });

            modelBuilder.Entity<tbMunicipios>(entity =>
            {
                entity.HasKey(e => e.muni_Id)
                    .HasName("PK_gral_tbMunicipios_muni_Id");

                entity.ToTable("tbMunicipios", "gral");

                entity.Property(e => e.muni_Codigo)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.muni_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.muni_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.HasOne(d => d.depa)
                    .WithMany(p => p.tbMunicipios)
                    .HasForeignKey(d => d.depa_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbMunicipios_gral_tbDepartamentos_depa_Id");

                entity.HasOne(d => d.muni_UsuCreacionNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UsuCreacionNavigation)
                    .HasForeignKey(d => d.muni_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbMunicipios_acce_tbUsuarios_muni_UsuCreacion_user_Id");

                entity.HasOne(d => d.muni_UsuModificacionNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UsuModificacionNavigation)
                    .HasForeignKey(d => d.muni_UsuModificacion)
                    .HasConstraintName("FK_gral_tbMunicipios_acce_tbUsuarios_muni_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbPantallas>(entity =>
            {
                entity.HasKey(e => e.pant_Id)
                    .HasName("PK_acce_tbPantallas_pant_Id");

                entity.ToTable("tbPantallas", "acce");

                entity.Property(e => e.pant_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.pant_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pant_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pant_Icono)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.pant_Menu)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.pant_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.pant_Url)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.pant_reactId)
                    .IsRequired()
                    .HasMaxLength(80);
            });

            modelBuilder.Entity<tbPantallasPorRoles>(entity =>
            {
                entity.HasKey(e => e.prol_Id)
                    .HasName("PK_acce_tbPantallasPorRoles_pantrole_Id");

                entity.ToTable("tbPantallasPorRoles", "acce");

                entity.Property(e => e.prol_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.prol_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.prol_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.pant)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.pant_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbPantallas_pant_Id");

                entity.HasOne(d => d.prol_UsuCreacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolesprol_UsuCreacionNavigation)
                    .HasForeignKey(d => d.prol_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbUsuarios_pantrole_UsuCreacion_user_Id");

                entity.HasOne(d => d.prol_UsuModificacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolesprol_UsuModificacionNavigation)
                    .HasForeignKey(d => d.prol_UsuModificacion)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbUsuarios_pantrole_UsuModificacion_user_Id");

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.role_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbRoles_role_Id");
            });

            modelBuilder.Entity<tbProveedores>(entity =>
            {
                entity.HasKey(e => e.prov_Id)
                    .HasName("PK_pbli_tbProveedores_prov_Id");

                entity.ToTable("tbProveedores", "pbli");

                entity.Property(e => e.prov_Correo).HasMaxLength(250);

                entity.Property(e => e.prov_Direccion).HasMaxLength(250);

                entity.Property(e => e.prov_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.prov_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.prov_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.prov_Nombre).HasMaxLength(150);

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbProveedores)
                    .HasForeignKey(d => d.muni_Id)
                    .HasConstraintName("FK_pbli_tbProveedores_gral_tbMunicipios_muni_Id");

                entity.HasOne(d => d.prov_UsuCreacionNavigation)
                    .WithMany(p => p.tbProveedoresprov_UsuCreacionNavigation)
                    .HasForeignKey(d => d.prov_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbProveedores_acce_tbUsuarios_prov_UsuCreacion");

                entity.HasOne(d => d.prov_UsuModificacionNavigation)
                    .WithMany(p => p.tbProveedoresprov_UsuModificacionNavigation)
                    .HasForeignKey(d => d.prov_UsuModificacion)
                    .HasConstraintName("FK_pbli_tbProveedores_acce_tbUsuarios_prov_UsuModificacion");
            });

            modelBuilder.Entity<tbRoles>(entity =>
            {
                entity.HasKey(e => e.role_Id)
                    .HasName("PK_acce_tbRoles_role_Id");

                entity.ToTable("tbRoles", "acce");

                entity.HasIndex(e => e.role_Nombre, "UQ__tbRoles__3895D82E1348127C")
                    .IsUnique();

                entity.Property(e => e.role_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.role_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.role_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.role_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.role_UsuCreacionNavigation)
                    .WithMany(p => p.tbRolesrole_UsuCreacionNavigation)
                    .HasForeignKey(d => d.role_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbRoles_acce_tbUsuarios_role_UsuCreacion_user_Id");

                entity.HasOne(d => d.role_UsuModificacionNavigation)
                    .WithMany(p => p.tbRolesrole_UsuModificacionNavigation)
                    .HasForeignKey(d => d.role_UsuModificacion)
                    .HasConstraintName("FK_acce_tbRoles_acce_tbUsuarios_role_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbServicios>(entity =>
            {
                entity.HasKey(e => e.serv_Id)
                    .HasName("PK_pbli_tbServecios_serv_Id");

                entity.ToTable("tbServicios", "pbli");

                entity.Property(e => e.serv_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.serv_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.serv_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.serv_Nombre).HasMaxLength(150);

                entity.Property(e => e.serv_Precio).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.serv_UsuCreacionNavigation)
                    .WithMany(p => p.tbServiciosserv_UsuCreacionNavigation)
                    .HasForeignKey(d => d.serv_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbServicios_acce_tbUsuarios_serv_UsuCreacion");

                entity.HasOne(d => d.serv_UsuModificacionNavigation)
                    .WithMany(p => p.tbServiciosserv_UsuModificacionNavigation)
                    .HasForeignKey(d => d.serv_UsuModificacion)
                    .HasConstraintName("FK_pbli_tbServicios_acce_tbUsuarios_serv_UsuModificacion");
            });

            modelBuilder.Entity<tbSucursales>(entity =>
            {
                entity.HasKey(e => e.sucu_Id)
                    .HasName("PK_pbli_tbSucursales_sucu_Id");

                entity.ToTable("tbSucursales", "pbli");

                entity.Property(e => e.sucu_Direccion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.sucu_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.sucu_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sucu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.sucu_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbSucursales)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbSucursales_gral_tbMunicipios_muni_Id");

                entity.HasOne(d => d.sucu_UsuCreacionNavigation)
                    .WithMany(p => p.tbSucursalessucu_UsuCreacionNavigation)
                    .HasForeignKey(d => d.sucu_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pbli_tbSucursales_acce_tbUsuarios_sucu_UsuCreacion");

                entity.HasOne(d => d.sucu_UsuModificacionNavigation)
                    .WithMany(p => p.tbSucursalessucu_UsuModificacionNavigation)
                    .HasForeignKey(d => d.sucu_UsuModificacion)
                    .HasConstraintName("FK_pbli_tbSucursales_acce_tbUsuarios_sucu_UsuModificacion");
            });

            modelBuilder.Entity<tbUsuarios>(entity =>
            {
                entity.HasKey(e => e.user_Id)
                    .HasName("PK_acce_tbUsuarios_user_Id");

                entity.ToTable("tbUsuarios", "acce");

                entity.Property(e => e.user_Contrasena).IsRequired();

                entity.Property(e => e.user_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.user_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.user_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.empe)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.empe_Id)
                    .HasConstraintName("FK_acce_tbUsuarios_pbli_tbEmpleados_empe_Id");

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.role_Id)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbRoles_role_Id");

                entity.HasOne(d => d.user_UsuCreacionNavigation)
                    .WithMany(p => p.Inverseuser_UsuCreacionNavigation)
                    .HasForeignKey(d => d.user_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbUsuarios_user_UsuCreacion_user_Id");

                entity.HasOne(d => d.user_UsuModificacionNavigation)
                    .WithMany(p => p.Inverseuser_UsuModificacionNavigation)
                    .HasForeignKey(d => d.user_UsuModificacion)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbUsuarios_user_UsuModificacion_user_Id");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}